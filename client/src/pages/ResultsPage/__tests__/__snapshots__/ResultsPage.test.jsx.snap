// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component - Results Page when isLoading is true Component - Results Page when isLoading is false should render Page when isLoading is false 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ResultsPage />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef>
          <Title>
            Latest Generated File Info.
          </Title>
        </ForwardRef>,
        <p
          className=" is-size-4 has-text-grey-light panel-heading"
        >
          To view all phone numbers, please download the file
        </p>,
        <Table
          items={
            Array [
              Object {
                "name": "Smallest Phone Number",
                "value": "",
              },
              Object {
                "name": "Largest Phone Number",
                "value": "",
              },
              Object {
                "name": "Number of Phone Numbers",
                "value": "",
              },
            ]
          }
        />,
        <ForwardRef
          className="field is-grouped"
        >
          <p
            className="control"
          >
            <Button
              isDisabled={false}
              left={false}
              onClick={[Function]}
              right={false}
            >
              Download File
            </Button>
          </p>
          <p
            className="control"
          >
            <Button
              isDisabled={false}
              left={false}
              onClick={[Function]}
              right={false}
            >
              Back To HomePage
            </Button>
          </p>
        </ForwardRef>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Title>
            Latest Generated File Info.
          </Title>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Latest Generated File Info.",
          },
          "ref": null,
          "rendered": "Latest Generated File Info.",
          "type": [Function],
        },
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": true,
            "rules": Array [
              "
  &::after {
    display: block;
    content: '';
    position: relative;
    height: 1px;
    background: #e4e7ed;
  }
  &:last-child::after {
    display: none;
  }",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "To view all phone numbers, please download the file",
          "className": " is-size-4 has-text-grey-light panel-heading",
        },
        "ref": null,
        "rendered": "To view all phone numbers, please download the file",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "items": Array [
            Object {
              "name": "Smallest Phone Number",
              "value": "",
            },
            Object {
              "name": "Largest Phone Number",
              "value": "",
            },
            Object {
              "name": "Number of Phone Numbers",
              "value": "",
            },
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <p
              className="control"
            >
              <Button
                isDisabled={false}
                left={false}
                onClick={[Function]}
                right={false}
              >
                Download File
              </Button>
            </p>,
            <p
              className="control"
            >
              <Button
                isDisabled={false}
                left={false}
                onClick={[Function]}
                right={false}
              >
                Back To HomePage
              </Button>
            </p>,
          ],
          "className": "field is-grouped",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Button
                isDisabled={false}
                left={false}
                onClick={[Function]}
                right={false}
              >
                Download File
              </Button>,
              "className": "control",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Download File",
                "isDisabled": false,
                "left": false,
                "onClick": [Function],
                "right": false,
              },
              "ref": null,
              "rendered": "Download File",
              "type": [Function],
            },
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Button
                isDisabled={false}
                left={false}
                onClick={[Function]}
                right={false}
              >
                Back To HomePage
              </Button>,
              "className": "control",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Back To HomePage",
                "isDisabled": false,
                "left": false,
                "onClick": [Function],
                "right": false,
              },
              "ref": null,
              "rendered": "Back To HomePage",
              "type": [Function],
            },
            "type": "p",
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bxivhb",
            "isStatic": true,
            "rules": Array [
              "
  justify-content: space-between !important;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bxivhb",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef>
            <Title>
              Latest Generated File Info.
            </Title>
          </ForwardRef>,
          <p
            className=" is-size-4 has-text-grey-light panel-heading"
          >
            To view all phone numbers, please download the file
          </p>,
          <Table
            items={
              Array [
                Object {
                  "name": "Smallest Phone Number",
                  "value": "",
                },
                Object {
                  "name": "Largest Phone Number",
                  "value": "",
                },
                Object {
                  "name": "Number of Phone Numbers",
                  "value": "",
                },
              ]
            }
          />,
          <ForwardRef
            className="field is-grouped"
          >
            <p
              className="control"
            >
              <Button
                isDisabled={false}
                left={false}
                onClick={[Function]}
                right={false}
              >
                Download File
              </Button>
            </p>
            <p
              className="control"
            >
              <Button
                isDisabled={false}
                left={false}
                onClick={[Function]}
                right={false}
              >
                Back To HomePage
              </Button>
            </p>
          </ForwardRef>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Title>
              Latest Generated File Info.
            </Title>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Latest Generated File Info.",
            },
            "ref": null,
            "rendered": "Latest Generated File Info.",
            "type": [Function],
          },
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htpNat",
              "isStatic": true,
              "rules": Array [
                "
  &::after {
    display: block;
    content: '';
    position: relative;
    height: 1px;
    background: #e4e7ed;
  }
  &:last-child::after {
    display: none;
  }",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-htpNat",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "To view all phone numbers, please download the file",
            "className": " is-size-4 has-text-grey-light panel-heading",
          },
          "ref": null,
          "rendered": "To view all phone numbers, please download the file",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "items": Array [
              Object {
                "name": "Smallest Phone Number",
                "value": "",
              },
              Object {
                "name": "Largest Phone Number",
                "value": "",
              },
              Object {
                "name": "Number of Phone Numbers",
                "value": "",
              },
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <p
                className="control"
              >
                <Button
                  isDisabled={false}
                  left={false}
                  onClick={[Function]}
                  right={false}
                >
                  Download File
                </Button>
              </p>,
              <p
                className="control"
              >
                <Button
                  isDisabled={false}
                  left={false}
                  onClick={[Function]}
                  right={false}
                >
                  Back To HomePage
                </Button>
              </p>,
            ],
            "className": "field is-grouped",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Button
                  isDisabled={false}
                  left={false}
                  onClick={[Function]}
                  right={false}
                >
                  Download File
                </Button>,
                "className": "control",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "Download File",
                  "isDisabled": false,
                  "left": false,
                  "onClick": [Function],
                  "right": false,
                },
                "ref": null,
                "rendered": "Download File",
                "type": [Function],
              },
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Button
                  isDisabled={false}
                  left={false}
                  onClick={[Function]}
                  right={false}
                >
                  Back To HomePage
                </Button>,
                "className": "control",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "Back To HomePage",
                  "isDisabled": false,
                  "left": false,
                  "onClick": [Function],
                  "right": false,
                },
                "ref": null,
                "rendered": "Back To HomePage",
                "type": [Function],
              },
              "type": "p",
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bxivhb",
              "isStatic": true,
              "rules": Array [
                "
  justify-content: space-between !important;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bxivhb",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
